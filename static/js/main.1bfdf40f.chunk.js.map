{"version":3,"sources":["Components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","lvl1","display","lvl2","flexGrow","maxWidth","overflowX","lvl3","flexDirection","overflow","transition","minHeight","mainroot","margin","InoviceRoot","position","width","root","marginTop","alignItems","input","marginLeft","createMuiTheme","spacing","flex","iconButton","padding","divider","height","actions","textAlign","actionButton","marginRight","MainPage","props","buildFileSelector","fileSelector","document","createElement","setAttribute","componentDidMount","fileSelectorXml","onchange","e","onHandleXmlFileSelectorChange","fileSelectorXslt","onHandleXsltFileSelectorChange","setState","xmlFilePath","target","files","name","file","reader","FileReader","onload","xmlFile","result","readAsText","error","window","File","FileList","Blob","xsltFilePath","xsltFile","alert","onXmlFileClear","value","onXsltFileClear","handleXmlFileSelect","preventDefault","click","handleXsltFileSelect","pdfSettings","landscape","marginsType","printBackground","printSelectionOnly","pageSize","shortDate","date","Date","toLocaleString","split","join","onSaveClick","a","state","resultInvoice","fs","require","electron","BrowserWindow","remote","BrowWindow","webPreferences","nodeIntegration","show","app","appPath","getPath","writeFile","console","log","loadURL","webContents","on","printToPDF","then","data","unlink","err","close","catch","onShowClick","parser","DOMParser","xmlDoc","parseFromString","xsltDoc","Attachment","getElementsByTagName","textContent","undefined","Buffer","from","toString","xsltProcessor","XSLTProcessor","importStylesheet","resultDocument","transformToFragment","getElementById","innerHTML","appendChild","onInputChange","classes","this","className","maxWidthXl","component","placeholder","disabled","aria-label","onClick","orientation","variant","color","id","Component","withStyles","App","toggleDarkTheme","newPaletteType","theme","palette","type","handleSwitchChange","event","switchCheck","checked","muiTheme","responsiveFontSizes","ThemeProvider","CssBaseline","Switch","onChange","Main","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1bfdf40f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { withStyles, createMuiTheme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme();\r\nconst useStyles = {\r\n    lvl1:{\r\n        display: \"flex\",\r\n        \r\n    },\r\n    lvl2:{\r\n        flexGrow: \"1\",\r\n        maxWidth: \"100%\",\r\n        overflowX: \"hidden\"\r\n    },\r\n    lvl3:{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        overflow: \"hidden\",\r\n        transition: \"transform 195ms\",\r\n        minHeight: \"95vh\"\r\n    },\r\n    mainroot:{\r\n        margin : '15px'\r\n    },\r\n    InoviceRoot:{\r\n        position: 'relative',\r\n        margin: 'auto',\r\n        width: '850px'\r\n    },\r\n    root: {\r\n        marginTop:'8px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: '100%',       \r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    divider: {\r\n        height: 28,\r\n        margin: 4,\r\n    },\r\n    actions:{\r\n        marginTop:'8px',\r\n        textAlign: \"center\",\r\n    },\r\n    actionButton:{\r\n        marginRight:\"5px\"\r\n    }\r\n};\r\n\r\nclass MainPage extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            xmlFilePath : null,\r\n            xsltFilePath : null,\r\n            xmlFile : null,\r\n            xsltFile: null,\r\n            resultInvoice : null            \r\n        }\r\n    }\r\n\r\n    buildFileSelector=()=>{\r\n        const fileSelector = document.createElement('input');\r\n        fileSelector.setAttribute('type', 'file');\r\n        fileSelector.setAttribute('multiple', 'multiple');\r\n        return fileSelector;\r\n    }\r\n\r\n    componentDidMount=()=>{\r\n        this.fileSelectorXml = this.buildFileSelector();\r\n        this.fileSelectorXml.onchange = (e) =>this.onHandleXmlFileSelectorChange(e);\r\n        this.fileSelectorXslt = this.buildFileSelector();\r\n        this.fileSelectorXslt.onchange = (e) =>this.onHandleXsltFileSelectorChange(e);        \r\n    }\r\n\r\n    onHandleXmlFileSelectorChange=(e)=>{\r\n        this.setState({xmlFilePath : e.target.files[0].name});\r\n        let file = e.target.files[0];\r\n        let reader = new FileReader();\r\n\r\n        try {\r\n            reader.onload = (e) =>{\r\n                this.setState({xmlFile:e.target.result})\r\n            };\r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            this.setState({xmlFilePath:\"\",xmlFile:null});\r\n        }  \r\n    }\r\n\r\n    onHandleXsltFileSelectorChange=(e)=>{\r\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n            this.setState({xsltFilePath:e.target.files[0].name});\r\n            let file = e.target.files[0];\r\n            let reader = new FileReader();\r\n            try {\r\n                reader.onload = (e) =>{\r\n                    this.setState({xsltFile:e.target.result});\r\n                }\r\n                reader.readAsText(file);\r\n            } catch (error) {\r\n                this.setState({xsltFilePath:\"\",xsltFile:null});\r\n            }    \r\n        } else {\r\n            alert(\"Your browser is too old to support HTML5 File API\");\r\n        }        \r\n    }    \r\n    \r\n    onXmlFileClear=()=>{\r\n        this.fileSelectorXml.value = \"\";\r\n        this.setState({xmlFile:null,xmlFilePath:\"\"});\r\n    }\r\n\r\n    onXsltFileClear=()=>{\r\n        this.fileSelectorXslt.value = \"\";\r\n        this.setState({xsltFile:null,xsltFilePath:\"\"});\r\n    }\r\n\r\n    handleXmlFileSelect = (e) => {\r\n        e.preventDefault();        \r\n        this.fileSelectorXml.click();        \r\n    }\r\n\r\n    handleXsltFileSelect = (e) => {\r\n        e.preventDefault();        \r\n        this.fileSelectorXslt.click();        \r\n    }    \r\n\r\n    pdfSettings=()=> {\r\n        var paperSizeArray = [\"A4\", \"A5\"];\r\n        var option = {\r\n            landscape: false,\r\n            marginsType: 0,\r\n            printBackground: false,\r\n            printSelectionOnly: false,\r\n            pageSize: paperSizeArray[0],\r\n        };\r\n      return option;\r\n    }\r\n\r\n    shortDate = () =>{\r\n        let date = new Date().toLocaleString();\r\n        date = date.split(\" \").join(\"-\");\r\n        date = date.split(\".\").join(\"-\");\r\n        date = date.split(\":\").join(\"-\");\r\n        return  date;\r\n    }\r\n\r\n    onSaveClick=async()=>{\r\n        if(this.state.resultInvoice)\r\n        {\r\n            let fs = window.require(\"fs\");\r\n            const electron = window.require('electron');\r\n            const BrowserWindow = electron.remote.BrowserWindow;        \r\n            let BrowWindow = new BrowserWindow({ \r\n                width: 900, \r\n                height: 680,\r\n                webPreferences: {\r\n                    nodeIntegration: true\r\n                },\r\n                show : false           \r\n            });\r\n            \r\n            let app = (electron.app || electron.remote.app);\r\n            let appPath =app.getPath('desktop');\r\n            await fs.writeFile(appPath+'/tempEInvoice.html', this.state.resultInvoice,(error)=>{\r\n                if(error)\r\n                {\r\n                    alert(\"Hata\");\r\n                }\r\n                console.log(\"file:///\"+appPath+\"/tempEInvoice.html\");\r\n\r\n                BrowWindow.loadURL(\"file:///\"+appPath+\"/tempEInvoice.html\");\r\n            });\r\n           \r\n            BrowWindow.webContents.on('did-finish-load', () => {\r\n                // Use default printing options\r\n                BrowWindow.webContents.printToPDF(this.pdfSettings()).then(data => {\r\n                    fs.writeFile(app.getPath('desktop')+\"/\"+this.shortDate()+'.pdf', data, (error) => {\r\n                    if (error) \r\n                    {\r\n                        console.log(error);\r\n                        fs.unlink(appPath+\"/tempEInvoice.html\", function (err) {\r\n                            if (err) throw err;\r\n                            console.log('File deleted!');\r\n                        }); \r\n                        BrowWindow.close();\r\n                    }\r\n\r\n                    console.log('Write PDF successfully.')\r\n                    BrowWindow.close();\r\n                  })\r\n                }).catch(error => {\r\n                  console.log(error)\r\n                  BrowWindow.close();\r\n                })\r\n            })\r\n        }\r\n    }\r\n  \r\n    onShowClick=()=>{\r\n        if(this.state.xmlFilePath){           \r\n\r\n            let parser = new DOMParser();\r\n            let xmlDoc = parser.parseFromString(this.state.xmlFile, \"text/xml\");\r\n            let xsltDoc = null;\r\n            let Attachment = xmlDoc.getElementsByTagName(\"cbc:EmbeddedDocumentBinaryObject\")[0].textContent;\r\n\r\n            if(Attachment !== undefined && (this.state.xsltFilePath === \"\" || this.state.xsltFilePath === null))\r\n            {\r\n                xsltDoc = parser.parseFromString(Buffer.from(Attachment, 'base64').toString('utf-8'), \"text/xml\");\r\n            }\r\n            else{\r\n                xsltDoc = parser.parseFromString(this.state.xsltFile, \"text/xml\");\r\n            }\r\n\r\n            let xsltProcessor=new XSLTProcessor();\r\n            xsltProcessor.importStylesheet(xsltDoc);\r\n            let resultDocument = xsltProcessor.transformToFragment(xmlDoc,document);\r\n            if(resultDocument != null)\r\n            {\r\n                document.getElementById(\"example\").innerHTML = \"\";\r\n                document.getElementById(\"example\").appendChild(resultDocument); \r\n                this.setState({resultInvoice:document.getElementById(\"example\").innerHTML});          \r\n            }                \r\n        }\r\n    }\r\n\r\n    onInputChange=(e)=>{\r\n        this.setState({xmlFilePath:e.target.value});\r\n    }\r\n\r\n    render(){\r\n        const {classes} = this.props;\r\n        return (\r\n            <div className={classes.lvl1}>\r\n                <div className={classes.lvl2}>                       \r\n                    <div className={classes.lvl3}>   \r\n                        <Container maxWidthXl>\r\n                            <div className={classes.mainroot}>                                                        \r\n                                <Paper component=\"form\" className={classes.root}>\r\n                                    <InputBase\r\n                                        className={classes.input}\r\n                                        placeholder=\"Xml Dosyasını Seç\"\r\n                                        value = {this.state.xmlFilePath}\r\n                                        disabled = {true}\r\n                                    />\r\n                                    <IconButton className={classes.iconButton} aria-label=\"folder\" onClick={this.handleXmlFileSelect}>\r\n                                        <FolderIcon />\r\n                                    </IconButton>\r\n                                    <IconButton className={classes.iconButton} aria-label=\"folder\" onClick={this.onXmlFileClear}>\r\n                                        <ClearIcon />\r\n                                    </IconButton>                    \r\n                                </Paper>\r\n                                <Paper component=\"form\" className={classes.root}>\r\n                                    <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"Xslt Dosyasını Seç\"\r\n                                    value = {this.state.xsltFilePath}\r\n                                    disabled = {true}\r\n                                    />\r\n                                    <IconButton className={classes.iconButton} aria-label=\"folder\" onClick={this.handleXsltFileSelect}>\r\n                                        <FolderIcon />\r\n                                    </IconButton>\r\n                                    <IconButton className={classes.iconButton} aria-label=\"folder\" onClick={this.onXsltFileClear}>\r\n                                        <ClearIcon />\r\n                                    </IconButton>                    \r\n                                </Paper>    \r\n                                <Divider orientation='horizontal' variant ='fullWidth'/>\r\n                                <div className={classes.actions}>\r\n                                    <Button className={classes.actionButton} variant=\"contained\" color=\"primary\" onClick = {this.onShowClick}>Faturayı Göster</Button> \r\n                                    <Button className={classes.actionButton} variant=\"contained\" color=\"primary\" onClick = {this.onSaveClick}>Faturayı Kaydet</Button>\r\n                                </div>\r\n\r\n                                    <div>\r\n                                        <div className={classes.InoviceRoot} id=\"example\" >\r\n                                        </div>      \r\n                                    </div>\r\n                            </div>\r\n                        </Container>\r\n                    </div>\r\n                </div>          \r\n            </div>  \r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(MainPage);","import React, { Component } from 'react';\nimport './App.css';\nimport { ThemeProvider  } from \"@material-ui/styles\";\nimport {createMuiTheme,responsiveFontSizes } from \"@material-ui/core\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Switch from '@material-ui/core/Switch';\nimport Main from './Components/Main';\n\nexport class App extends Component {\n  constructor(){\n    super();\n\n    this.state={\n      switchCheck:false,\n      theme : {\n        palette: {\n          type: \"light\"\n        }\n      }\n    }\n  }\n\n   toggleDarkTheme = () => {\n    let newPaletteType = this.state.theme.palette.type === \"light\" ? \"dark\" : \"light\";\n    this.setState({\n      theme:{\n        palette: {\n          type: newPaletteType\n        }\n      }\n    });\n  };\n\n  handleSwitchChange = (event) => {\n    this.toggleDarkTheme()\n    this.setState({switchCheck:event.target.checked});\n  };\n\n  async componentDidMount(){\n  \n  }\n  \n  render() {\n    const muiTheme = createMuiTheme(this.state.theme);\n    const theme = responsiveFontSizes(muiTheme);\n\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline/>\n        <Switch\n          checked={this.state.switchCheck}\n          onChange={this.handleSwitchChange}\n        />          \n        <Main/>     \n      </ThemeProvider> \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}